AWSTemplateFormatVersion: '2010-09-09'

Description:
  'Websocket IaC'

Parameters:
  ProjectName:
    Type: String
  ENV:
    Type: String
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProd: !Equals [!Ref ENV, 'prod']

Resources:
  ConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${ENV}-connection-table'
      AttributeDefinitions:
        - AttributeName: connection_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: N
      KeySchema:
        - AttributeName: connection_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  WebsocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${ProjectName}-${ENV}-websocket-api'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref ConnectIntegration]]
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref DisconnectIntegration]]
#  SendRoute:
#    Type: AWS::ApiGatewayV2::Route
#    Properties:
#      ApiId: !Ref WebsocketAPI
#      RouteKey: $default
#      AuthorizationType: NONE
#      Target: !Join ["/", ["integrations", !Ref SendIntegration]]

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations'
      IntegrationMethod: POST
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations'
      IntegrationMethod: POST
#  SendIntegration:
#    Type: AWS::ApiGatewayV2::Integration
#    Properties:
#      ApiId: !Ref WebsocketAPI
#      IntegrationType: AWS_PROXY
#      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendFunction.Arn}/invocations'
#      IntegrationMethod: POST

  ConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WebsocketConnectFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Handler: index.handler
      Code:
        ZipFile: |
          import boto3
          import os

          db = boto3.client("dynamodb")


          def handler(event, context):
              print(event)
              print(context)

              db.put_item(
                  TableName=os.getenv("TABLE_NAME"),
                  Item={
                      "connection_id": {"S": event["requestContext"]["connectionId"]},
                      "user_id": {"N": str(1)}
                  },
              )

              return {}

      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionTable
  DisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WebsocketDisconnectFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Handler: index.handler
      Code:
        ZipFile: |
          import boto3
          import os

          db = boto3.client("dynamodb")


          def handler(event, context):
              print(event)
              print(context)

              db.delete_item(
                  TableName=os.getenv("TABLE_NAME"),
                  Key={"connection_id": {"S": event["requestContext"]["connectionId"]}},
              )

              return {}

      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionTable
#  SendFunction:
#    Type: AWS::Lambda::Function
#    Properties:
#      FunctionName: WebsocketSendFunction
#      Role: !GetAtt LambdaExecutionRole.Arn
#      Runtime: python3.9
#      Handler: index.handler
#      Code:
#        ZipFile: |
#          import json
#
#          import boto3
#          import os
#
#          db = boto3.client("dynamodb")
#
#
#          def handler(event, context):
#              print(event)
#              print(context)
#
#              message = json.loads(event["body"])["message"]
#
#              items = db.query(
#                  TableName=os.getenv("TABLE_NAME"),
#                  IndexName="UserIdIndex",
#                  KeyConditionExpression="user_id = :user_id",
#                  ExpressionAttributeValues={
#                      ":user_id": {"N": str(event["body"]["user_id"])},
#                  },
#              )
#
#              api = boto3.client(
#                  "apigatewaymanagementapi",
#                  endpoint_url=f"https://{event['requestContext']['domainName']}/{event['requestContext']['stage']}",
#              )
#              for item in items:
#                  api.post_to_connection(
#                      ConnectionId=item["connectionId"],
#                      Data=message,
#                  )
#
#              return {}
#
#      Environment:
#        Variables:
#          TABLE_NAME: !Ref ConnectionTable
  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ConnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPI}/*"
  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DisconnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPI}/*"
#  SendFunctionPermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      FunctionName: !GetAtt SendFunction.Arn
#      Action: lambda:InvokeFunction
#      Principal: apigateway.amazonaws.com
#      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPI}/*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt ConnectionTable.Arn
              - Effect: Allow
                Action:
                  - 'execute-api:ManageConnections'
                Resource:
                  - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPI}/*'
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
#      - SendRoute
    Properties:
      ApiId: !Ref WebsocketAPI
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebsocketAPI
      DeploymentId: !Ref Deployment
      StageName: !Ref ENV
#      AccessLogSettings:
#        DestinationArn: !GetAtt LogGroup.Arn
#        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
#  LogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub '/apigw/${ProjectName}/${ENV}'
#
  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
