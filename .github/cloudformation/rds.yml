AWSTemplateFormatVersion: '2010-09-09'

Description:
  'RDS IaC'

Parameters:
  ProjectName:
    Type: String
  ENV:
    Type: String
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProd: !Equals [!Ref ENV, 'prod']

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ProjectName}-${ENV}-db-sg'
      VpcId: {'Fn::ImportValue': !Sub '${ProjectName}-${ENV}-VPC'}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}/db/${ENV}'
      GenerateSecretString:
        RequireEachIncludedType: True
        SecretStringTemplate: !Sub '{"username": "${ProjectName}"}'
        GenerateStringKey: 'password'
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn: RDSCluster
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${ProjectName}-${ENV}-db-subnet-group'
      DBSubnetGroupDescription: !Sub '${ProjectName}-${ENV}-db-subnet-group'
      SubnetIds:
        - !If [ IsProd, {'Fn::ImportValue': !Sub '${ProjectName}-${ENV}-PrivateSubnet1'}, {'Fn::ImportValue': !Sub '${ProjectName}-${ENV}-PublicSubnet1'} ]
        - !If [ IsProd, {'Fn::ImportValue': !Sub '${ProjectName}-${ENV}-PrivateSubnet2'}, {'Fn::ImportValue': !Sub '${ProjectName}-${ENV}-PublicSubnet2'} ]
  RDSCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    DependsOn: RDSSecret
    Properties:
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBClusterIdentifier: !Sub '${ProjectName}-${ENV}-db-cluster'
      Engine: aurora-postgresql
      EngineVersion: 14.7
      DBClusterParameterGroupName: default.aurora-postgresql14
      Port: 5432
      DatabaseName: !Ref ProjectName
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ] ]
      VpcSecurityGroupIds: [ !GetAtt SecurityGroup.GroupId ]
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 4
      EnableCloudwatchLogsExports:
        - postgresql
  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectName}-${ENV}-db-instance'
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: true
      DBInstanceClass: db.serverless

Outputs:
  WriterHost:
    Value: !GetAtt RDSCluster.Endpoint.Address
  ReaderHost:
    Value: !GetAtt RDSCluster.ReadEndpoint.Address
