AWSTemplateFormatVersion: '2010-09-09'

Description:
  'VPC IaC'

Parameters:
  ProjectName:
    Type: String
  ENV:
    Type: String
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProd: !Equals [!Ref ENV, 'prod']

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref 'AWS::Region']
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref 'AWS::Region']
      MapPublicIpOnLaunch: true
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref 'AWS::Region' ]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref 'AWS::Region' ]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  EIP:
    Type: AWS::EC2::EIP
    Condition: IsProd
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: IsProd
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: IsProd
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsProd
    Properties:
      GroupDescription: !Sub '${ProjectName}-${ENV}-bastion-sg'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  SSMInstanceRole:
    Type: AWS::IAM::Role
    Condition: IsProd
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: IsProd
    Properties:
      Roles:
        - !Ref SSMInstanceRole
  BastionHost:
    Type: AWS::EC2::Instance
    Condition: IsProd
    Properties:
      InstanceType: t3.micro
      ImageId: ami-01117fda37bb910d8
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref BastionHostSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras enable postgresql13
          sudo yum clean metadata
          sudo yum install -y postgresql

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub '${ProjectName}-${ENV}-VPC'
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${ProjectName}-${ENV}-PublicSubnet1'
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${ProjectName}-${ENV}-PublicSubnet2'
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${ProjectName}-${ENV}-PrivateSubnet1'
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${ProjectName}-${ENV}-PrivateSubnet2'

