from rest_framework import status
from rest_framework.test import APITestCase

from app.{{ app_name }}.models import {{ camel_case_app_name }}
from app.user.models import User


class {{ camel_case_app_name }}ListAPITest(APITestCase):
    MODEL = {{ camel_case_app_name }}
    PATH = "/v1/{{ app_name }}/"

    @classmethod
    def setUpTestData(cls):
        User.objects.create_user(email="test@test.com")
        cls.MODEL.objects.bulk_create([cls.MODEL() for i in range(20)])  # TODO: add create data

    def setUp(self) -> None:
        self.client.force_authenticate(User.objects.get(email="test@test.com"))

    def test_success_response(self):
        response = self.client.get(self.PATH)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        for data in response.data["results"]:
            self.assertListEqual(
                sorted([]),  # TODO: check results data keys
                sorted(data.keys()),
            )


class {{ camel_case_app_name }}CreateAPITest(APITestCase):
    MODEL = {{ camel_case_app_name }}
    PATH = "/v1/{{ app_name }}/"

    @classmethod
    def setUpTestData(cls):
        User.objects.create_user(email="test@test.com")

    def setUp(self) -> None:
        self.client.force_authenticate(User.objects.get(email="test@test.com"))

    def test_success_response(self):
        response = self.client.post(self.PATH, data={})  # TODO: add valid request data

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertDictEqual(response.data, {})  # TODO: check response data
        self.assertTrue(self.MODEL.objects.filter(id=response.data["id"]).exists())

    def test_failure_response(self):
        response = self.client.post(self.PATH, data={})  # TODO: add invalid request data

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertDictEqual(response.data, {})  # TODO: check response data
        self.assertFalse(self.MODEL.objects.filter(id=response.data["id"]).exists())


class {{ camel_case_app_name }}RetrieveAPITest(APITestCase):
    MODEL = {{ camel_case_app_name }}
    PATH = "/v1/{{ app_name }}/{id}/"

    @classmethod
    def setUpTestData(cls):
        User.objects.create_user(email="test@test.com")
        cls.instance = cls.MODEL.objects.create()  # TODO: add create data

    def setUp(self) -> None:
        self.client.force_authenticate(User.objects.get(email="test@test.com"))

    def test_success_response(self):
        response = self.client.get(self.PATH.format(id=self.instance.id))

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertDictEqual(response.data, {})  # TODO: check response data


class {{ camel_case_app_name }}UpdateAPITest(APITestCase):
    MODEL = {{ camel_case_app_name }}
    PATH = "/v1/{{ app_name }}/{id}/"

    @classmethod
    def setUpTestData(cls):
        User.objects.create_user(email="test@test.com")
        cls.instance = cls.MODEL.objects.create()  # TODO: add create data

    def setUp(self) -> None:
        self.client.force_authenticate(User.objects.get(email="test@test.com"))

    def test_success_response(self):
        response = self.client.put(self.PATH.format(id=self.instance.id), data={})  # TODO: add valid request data

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertDictEqual(response.data, {})  # TODO: check response data

    def test_failure_response(self):
        response = self.client.put(self.PATH.format(id=self.instance.id), data={})  # TODO: add invalid request data

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertDictEqual(response.data, {})  # TODO: check response data


class {{ camel_case_app_name }}DestroyAPITest(APITestCase):
    MODEL = {{ camel_case_app_name }}
    PATH = "/v1/{{ app_name }}/{id}/"

    @classmethod
    def setUpTestData(cls):
        User.objects.create_user(email="test@test.com")
        cls.instance = cls.MODEL.objects.create()  # TODO: add create data

    def setUp(self) -> None:
        self.client.force_authenticate(User.objects.get(email="test@test.com"))

    def test_success_response(self):
        response = self.client.delete(self.PATH.format(id=self.instance.id))

        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertIsNone(response.data)
        self.assertFalse(self.MODEL.objects.filter(id=self.instance.id).exists())
